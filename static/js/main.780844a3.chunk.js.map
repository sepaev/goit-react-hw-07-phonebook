{"version":3,"sources":["components/Form/Form.module.css","components/Section/Section.module.css","redux/actions/newContacts_actions.js","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","redux/actions/filter_actions.js","services/contactsAPI.js","redux/operations/contactsOperations.js","components/Contacts/Contacts.styled.jsx","redux/functions/doClearName.js","redux/functions/checkNameExists.js","redux/functions/doClearNumber.js","redux/functions/checkNumberExists.js","redux/functions/clearDoubleIDs.js","redux/functions/parseFilterQuery.js","redux/operations/filterOperations.js","redux/selectors.js","components/Contacts/Contacts.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","redux/operations/newContactOperations.js","App.js","reportWebVitals.js","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","nameRef","numberRef","PhonebookForm","styled","form","FormLabel","label","FormButton","button","addNewContactToState","createAction","e","preventDefault","target","children","payload","newName","value","trim","newNumber","clearNewContact","Form","dispatch","useDispatch","onSubmit","className","css","inputNumber","type","name","pattern","placeholder","maxLength","title","required","mask","TextH2","h2","Notification","message","makeSearch","toLowerCase","fetchContacts","a","axios","get","then","data","postContact","post","number","response","Notify","info","catch","error","failure","deleteContact","id","delete","_","success","defaults","baseURL","getContacts","createAsyncThunk","addContact","newContact","removeContact","ContactsList","ul","SearchInput","input","ContactsItem","li","NumberSpan","span","DeleteButton","doClearName","split","join","checkNameExists","inputName","contacts","result","clearName","forEach","doClearNumber","checkNumberExists","clearNumber","clearDoubleIDs","idList","filtredList","contact","indexOf","push","parseFilterQuery","filterQuery","filterQueryText","filterQueryNumber","match","console","log","toString","queries","query","doFiltration","state","getEntitiesSelector","filter","getFilterSelector","makeFiltration","createSelector","length","filtredArray","includes","namesArray","concat","getContactsSelector","entities","getNewContactSelector","getFiltredContactsSelector","Contacts","useSelector","filterdContacts","onInput","map","onClick","SectionStyle","section","TitleH1","h1","init","position","Section","component","sectionClassName","form_section","contacts_section","checkNewContactInState","check","checkNewContact","App","useEffect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","filterReducer","createReducer","newContactReducer","fulfilled","action","meta","arg","isLoading","pending","rejected","middleware","getDefaultMiddleware","logger","rootReducer","combineReducers","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.780844a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputNumber\":\"Form_inputNumber__1OEr1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_section\":\"Section_form_section__3z6LY\",\"contacts_section\":\"Section_contacts_section__2t_ne\"};","import { createAction } from '@reduxjs/toolkit';\r\nlet nameRef;\r\nlet numberRef;\r\n\r\nexport const addNewContactToState = createAction('newContact/create', e => {\r\n  e.preventDefault();\r\n  nameRef = e.target.children[0].children[1];\r\n  numberRef = e.target.children[1].children[1];\r\n\r\n  return {\r\n    payload: { newName: nameRef.value.trim(), newNumber: numberRef.value },\r\n  };\r\n});\r\n\r\nexport const clearNewContact = createAction('newContact/clear', () => {\r\n  if (nameRef) nameRef.value = '';\r\n  if (numberRef) numberRef.value = '';\r\n  return {\r\n    payload: { newName: '', newNumber: '' },\r\n  };\r\n});\r\n","import styled from '@emotion/styled';\r\n\r\nexport const PhonebookForm = styled.form`\r\n  display: block;\r\n  border: solid 1px black;\r\n  padding: 10px;\r\n`;\r\n\r\nexport const FormLabel = styled.label`\r\n  display: block;\r\n  font-size: 26px;\r\n  margin-bottom: 20px;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n  display: block;\r\n  font-size: 22px;\r\n`;\r\n","import { FormButton, FormLabel, PhonebookForm } from './Form.styled';\nimport InputMask from 'react-input-mask';\nimport { addNewContactToState } from '../../redux/actions/newContacts_actions.js';\nimport css from './Form.module.css';\nimport { useDispatch } from 'react-redux';\n\nfunction Form() {\n  const dispatch = useDispatch();\n  return (\n    <PhonebookForm onSubmit={e => dispatch(addNewContactToState(e))}>\n      <FormLabel>\n        <span>Name</span>\n        <InputMask\n          key='nameKey'\n          className={css.inputNumber}\n          type='text'\n          name='name'\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          placeholder='Arnold Schwarzenegger'\n          maxLength='25'\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </FormLabel>\n      <FormLabel>\n        <span>Number</span>\n        <InputMask\n          key='numberKey'\n          className={css.inputNumber}\n          type='tel'\n          name='number'\n          pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n          placeholder='+38 (099) 999-99-99'\n          mask='+38 (099) 999-99-99'\n          title='Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\n          required\n        />\n      </FormLabel>\n      <FormButton type='submit'>Add contact</FormButton>\n    </PhonebookForm>\n  );\n}\nexport default Form;\n","import styled from '@emotion/styled';\r\n\r\nexport const TextH2 = styled.h2`\r\n  font-weight: 400;\r\n  color: teal;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { TextH2 } from './Notification.styled';\r\n\r\nfunction  Notification ({ message }) {\r\n  return (\r\n    <div>\r\n      <TextH2>{message}</TextH2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const makeSearch = createAction('filter/changeFilter', value => ({ payload: value.trim().toLowerCase() }));\r\n","import axios from 'axios';\r\nimport { Notify } from 'notiflix';\r\n\r\n// axios.defaults.baseURL = 'http://localhost:4321';\r\n// add fake json\r\naxios.defaults.baseURL = 'https://my-json-server.typicode.com/sepaev/goit-react-hw-07-phonebook/';\r\n\r\nexport async function fetchContacts() {\r\n  return await axios.get('/contacts').then(({ data }) => data);\r\n}\r\n\r\nexport async function postContact({ newName, newNumber }) {\r\n  const { data } = await axios\r\n    .post('/contacts', { name: newName, number: newNumber })\r\n    .then(response => {\r\n      Notify.info(`Contact ${newName} was added successfully`);\r\n      return response;\r\n    })\r\n    .catch(error => {\r\n      Notify.failure(`Oh, no! ${error.message} Nothing was added.`);\r\n      return null;\r\n    });\r\n  return data;\r\n}\r\n\r\nexport async function deleteContact(id, name) {\r\n  axios\r\n    .delete('/contacts/' + id)\r\n    .then(_ => {\r\n      Notify.success(`Contact ${name} was removed successfully`);\r\n      return true;\r\n    })\r\n    .catch(error => {\r\n      Notify.failure(`Oh, no! ${error.message} Nothing was deleted.`);\r\n      return false;\r\n    });\r\n}\r\n","import { fetchContacts, postContact, deleteContact } from '../../services/contactsAPI';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = createAsyncThunk('contacts/fetchContacts', async () => await fetchContacts());\r\nexport const addContact = createAsyncThunk('contacts/createContact', async newContact => await postContact(newContact));\r\nexport const removeContact = createAsyncThunk(\r\n  'contacts/deleteContact',\r\n  async ({ id, name }) => await deleteContact(id, name),\r\n);\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ContactsList = styled.ul`\r\n  display: block;\r\n  padding-left: 10px;\r\n`;\r\nexport const SearchInput = styled.input`\r\n  display: block;\r\n  margin-bottom: 20px;\r\n  font-size: 22px;\r\n  outline: unset;\r\n  height: 26px;\r\n  &:focus,\r\n  &:hover {\r\n    filter: drop-shadow(0px 0px 5px lightblue);\r\n    border: 1px solid lightblue;\r\n    height: 28px;\r\n  }\r\n`;\r\n\r\nexport const ContactsItem = styled.li`\r\n  display: block;\r\n  font-family: monospace;\r\n  list-style-type: disc;\r\n  font-size: 18px;\r\n  margin-bottom: 2px;\r\n`;\r\n\r\nexport const NumberSpan = styled.span`\r\n  position: fixed;\r\n  right: 45px;\r\n  display: inline-flex;\r\n`;\r\nexport const DeleteButton = styled.button`\r\n  margin-left: 5px;\r\n  padding: 2px;\r\n  font-size: 10px;\r\n  width: 20px;\r\n  height: 20px;\r\n`;\r\n","function doClearName(name) {\r\n  if (!name) return name;\r\n  return name.split(' ').join('').toLowerCase().trim();\r\n}\r\nexport default doClearName;\r\n","import doClearName from './doClearName';\r\n\r\nfunction checkNameExists(inputName, contacts) {\r\n  let result = false;\r\n  const clearName = doClearName(inputName);\r\n  if (clearName === '') result = true;\r\n  contacts.forEach(({ name }) => {\r\n    if (clearName === doClearName(name)) result = true;\r\n  });\r\n  return result;\r\n}\r\nexport default checkNameExists;\r\n","function doClearNumber(number) {\r\n  if (!number) return number;\r\n  const noSpace = number.split(' ').join('');\r\n  const noBracket = noSpace.split('(').join('').split(')').join('');\r\n  const noSign = noBracket.split('-').join('').split('+').join('');\r\n  return noSign;\r\n}\r\nexport default doClearNumber;\r\n","import doClearNumber from './doClearNumber';\r\n\r\nfunction checkNumberExists(inputNumber, contacts) {\r\n  const clearNumber = doClearNumber(inputNumber);\r\n  let result = false;\r\n  if (inputNumber === '') result = true;\r\n  contacts.forEach(({ number }) => {\r\n    if (clearNumber === doClearNumber(number)) result = true;\r\n  });\r\n  return result;\r\n}\r\nexport default checkNumberExists;\r\n","function clearDoubleIDs(contacts) {\r\n  const idList = [];\r\n  const filtredList = [];\r\n  contacts.forEach(contact => {\r\n    if (idList.indexOf(contact.id) < 0) {\r\n      idList.push(contact.id);\r\n      filtredList.push(contact);\r\n    }\r\n  });\r\n  return filtredList;\r\n}\r\nexport default clearDoubleIDs;\r\n","function parseFilterQuery(filterQuery) {\r\n  let filterQueryText = '';\r\n  let filterQueryNumber = '';\r\n  if (filterQuery) {\r\n    if (filterQuery.match(/\\d+/)) {\r\n      console.log('filterQuery -- ', filterQuery);\r\n      filterQueryNumber = filterQuery.match(/\\d+/).toString();\r\n      const queries = filterQuery.split(filterQueryNumber);\r\n      const query = queries[0] || queries[1];\r\n      filterQueryText = query ? query : '';\r\n    } else {\r\n      filterQueryText = filterQuery;\r\n    }\r\n  }\r\n  return { filterQueryText, filterQueryNumber };\r\n}\r\nexport default parseFilterQuery;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\nimport { getEntitiesSelector, getFilterSelector } from '../selectors';\r\nimport { doClearNumber, parseFilterQuery } from '../functions';\r\n\r\nconst doFiltration = state => {\r\n  const contacts = getEntitiesSelector(state);\r\n  const filter = getFilterSelector(state);\r\n\r\n  const makeFiltration = createSelector(\r\n    [() => getEntitiesSelector(state), () => getFilterSelector(state)],\r\n    (contacts, filter) => {\r\n      console.log(contacts);\r\n      const { filterQueryText, filterQueryNumber } = parseFilterQuery(filter.toString());\r\n      if (filterQueryText.length > 0 || filterQueryNumber.length > 0) {\r\n        let filtredArray = [];\r\n        //поиск по номеру\r\n        if (filterQueryNumber.length > 0) {\r\n          filtredArray = contacts.filter(({ number }) => {\r\n            const clearNumberText = doClearNumber(number);\r\n            return clearNumberText.includes(filterQueryNumber);\r\n          });\r\n          //комбинированый поиск\r\n          if (filterQueryText.length > 0) {\r\n            const namesArray = contacts.filter(({ name }) => name.toLowerCase().includes(filterQueryText));\r\n            return filtredArray.length > 0 ? filtredArray.concat(namesArray) : namesArray;\r\n          }\r\n          return filtredArray;\r\n        } else {\r\n          //Поиск по имени\r\n          filtredArray = contacts.filter(({ name }) => name.toLowerCase().includes(filterQueryText));\r\n          return filtredArray;\r\n        }\r\n      }\r\n      return contacts;\r\n    },\r\n  );\r\n  return makeFiltration(contacts, filter);\r\n};\r\nexport default doFiltration;\r\n","import doFiltration from './operations/filterOperations';\r\nimport clearDoubleIDs from './functions/clearDoubleIDs';\r\nexport const getContactsSelector = state => state.contacts;\r\nexport const getEntitiesSelector = state => getContactsSelector(state).entities;\r\nexport const getFilterSelector = state => state.filter;\r\nexport const getNewContactSelector = state => state.newContact;\r\nexport const getAllStateSelector = state => state;\r\n\r\nexport const getFiltredContactsSelector = state => {\r\n  const contacts = getEntitiesSelector(state);\r\n  const filter = getFilterSelector(state);\r\n\r\n  if (!contacts || !contacts.length) return [];\r\n  if (!filter) return contacts;\r\n  const filtredArray = doFiltration(state);\r\n  const clearArray = clearDoubleIDs(filtredArray);\r\n  return clearArray;\r\n};\r\n","import { Fragment } from 'react';\r\nimport Notification from '../Notification';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { makeSearch } from '../../redux/actions/filter_actions';\r\nimport { removeContact } from '../../redux/operations/contactsOperations';\r\nimport { ContactsItem, ContactsList, DeleteButton, NumberSpan, SearchInput } from './Contacts.styled';\r\nimport { getFiltredContactsSelector, getContactsSelector } from '../../redux/selectors';\r\n\r\nfunction Contacts() {\r\n  const { entities } = useSelector(getContactsSelector);\r\n  const filterdContacts = useSelector(getFiltredContactsSelector);\r\n\r\n  const message = entities.length ? 'No contacts found.' : 'You have no contacts yet.';\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Fragment>\r\n      <ContactsList>\r\n        <SearchInput\r\n          type='text'\r\n          name='search'\r\n          title='Введите имя или телефон'\r\n          placeholder='Search contact'\r\n          onInput={e => dispatch(makeSearch(e.target.value))}\r\n        />\r\n        {filterdContacts.length > 0 &&\r\n          filterdContacts.map(({ id, name, number }) => (\r\n            <ContactsItem key={id}>\r\n              {'☎ ' + name + ': '}\r\n              <NumberSpan>\r\n                {number}\r\n                <DeleteButton id={id} onClick={() => dispatch(removeContact({ id, name }))}>\r\n                  X\r\n                </DeleteButton>\r\n              </NumberSpan>\r\n            </ContactsItem>\r\n          ))}\r\n      </ContactsList>\r\n      {!filterdContacts.length && <Notification message={message} />}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Contacts;\r\n","import styled from \"@emotion/styled\";\n\nexport const SectionStyle = styled.section`\n  text-align: left;\n  max-width: 500px;\n  width: 100%;\n  margin: auto;\n  border: solid 1px black;\n  background-color: white;\n  filter: drop-shadow(2px 4px 6px black);\n  padding: 25px;\n  border-radius: 10px;\n  margin: 50px auto;\n`;\n\nexport const TitleH1 = styled.h1`\n  font-size: 28px;\n  margin: 0 0 20px;\n  font-weight: 700;\n`;\n","import PropTypes from 'prop-types';\nimport Form from '../Form';\nimport Contacts from '../Contacts';\nimport { TitleH1, SectionStyle } from './Section.styled';\nimport { Notify } from 'notiflix';\nimport css from './Section.module.css';\n\nNotify.init({ position: 'center-top' });\n\nfunction Section({ title, component }) {\n  const sectionClassName = component === 'Form' ? css.form_section : css.contacts_section;\n  <TitleH1>{title}</TitleH1>;\n  return (\n    <SectionStyle className={sectionClassName}>\n      <TitleH1>{title}</TitleH1>\n      {component === 'Form' && <Form />}\n      {component === 'Contacts' && <Contacts />}\n    </SectionStyle>\n  );\n}\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  component: PropTypes.string.isRequired,\n};\n","import { Notify } from 'notiflix';\r\nimport { checkNumberExists, checkNameExists } from '../functions';\r\n///////////////////////\r\nconst checkNewContactInState = (newContact, contacts) => {\r\n  const check = checkNewContact(newContact, contacts);\r\n  if (!check.result) {\r\n    if (check.message) Notify.failure(check.message);\r\n    return false;\r\n  }\r\n  return true;\r\n};\r\n////////////////////////\r\nfunction checkNewContact({ newName, newNumber }, contacts) {\r\n  let message = '';\r\n  if (!newName || !newNumber || !contacts) return { result: false, message };\r\n  if (checkNumberExists(newNumber, contacts)) {\r\n    message = `Can't do this operation. Number ${newNumber} already exists.`;\r\n    return { result: false, message };\r\n  }\r\n  if (checkNameExists(newName, contacts)) {\r\n    message = `Can't do this operation. Name ${newName} already exists.`;\r\n    return { result: false, message };\r\n  }\r\n  message = 'Well Done! Added ' + newName;\r\n  return { result: true, message };\r\n}\r\n\r\nexport default checkNewContactInState;\r\n","import { useDispatch, useSelector } from 'react-redux';\nimport Section from './components/Section';\nimport { Notify } from 'notiflix';\nimport { clearNewContact } from './redux/actions/newContacts_actions';\nimport checkNewContactInState from './redux/operations/newContactOperations';\nimport { useEffect } from 'react';\nimport { getContacts, addContact } from './redux/operations/contactsOperations';\nimport { getNewContactSelector, getEntitiesSelector } from './redux/selectors';\n\nNotify.init({ position: 'center-top' });\n\nfunction App() {\n  const newContact = useSelector(getNewContactSelector);\n  const contacts = useSelector(getEntitiesSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (newContact.newName && checkNewContactInState(newContact, contacts)) {\n      dispatch(addContact(newContact));\n      dispatch(clearNewContact());\n    }\n  }, [contacts, dispatch, newContact]);\n\n  return (\n    <>\n      <Section title='Phonebook' component='Form' />\n      <hr />\n      <Section title='Contacts' component='Contacts' />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { makeSearch } from './actions/filter_actions';\r\nimport { addNewContactToState, clearNewContact } from './actions/newContacts_actions';\r\nimport { getContacts, addContact, removeContact } from './operations/contactsOperations';\r\n\r\nexport const filterReducer = createReducer('', { [makeSearch.type]: (_, { payload }) => payload });\r\n\r\nexport const newContactReducer = createReducer(\r\n  { newName: '', newNumber: '' },\r\n  {\r\n    [addNewContactToState]: (_, { payload }) => payload,\r\n    [clearNewContact]: (_, { payload }) => payload,\r\n  },\r\n);\r\n\r\nexport const entities = createReducer([], {\r\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n  [removeContact.fulfilled]: (state, action) => {\r\n    const contact = action.meta.arg;\r\n    return state.filter(({ id }) => id !== contact.id);\r\n  },\r\n  [getContacts.fulfilled]: (state, { payload }) => (state.length === payload.length ? state : payload),\r\n});\r\n\r\nexport const isLoading = createReducer(false, {\r\n  [getContacts.pending]: () => true,\r\n  [getContacts.fulfilled]: () => false,\r\n  [getContacts.rejected]: () => false,\r\n\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n\r\n  [removeContact.pending]: () => true,\r\n  [removeContact.fulfilled]: () => false,\r\n  [removeContact.rejected]: () => false,\r\n});\r\n\r\nexport const error = createReducer(null, {\r\n  //get\r\n  [getContacts.rejected]: (_, action) => action.payload,\r\n  [getContacts.pending]: () => null,\r\n  //post\r\n  [addContact.rejected]: (_, action) => action.payload,\r\n  [addContact.pending]: () => null,\r\n  //delete\r\n  [removeContact.rejected]: (_, action) => action.payload,\r\n  [removeContact.pending]: () => null,\r\n});\r\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport { filterReducer, newContactReducer, isLoading, entities, error } from './reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    // serializableCheck: {\r\n    //   ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    // },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: combineReducers({ isLoading, entities, error }),\r\n  filter: filterReducer,\r\n  newContact: newContactReducer,\r\n});\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// import { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n// export const persistor = persistStore(store);\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter', 'newContact'],\r\n// };\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n// reducer: persistedReducer,\r\n// const defaultExportObject = { store, persistor };\r\n// export default defaultExportObject;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}