{"version":3,"sources":["components/Form/Form.module.css","components/Section/Section.module.css","redux/actions/newContacts_actions.js","components/Form/Form.styled.jsx","components/Form/Form.jsx","components/Notification/Notification.styled.jsx","components/Notification/Notification.jsx","redux/actions/filter_actions.js","services/contactsAPI.js","redux/operations/contactsOperations.js","redux/operations/doClearNumber.js","redux/operations/useFilter.js","components/Contacts/Contacts.styled.jsx","redux/selectors.js","components/Contacts/Contacts.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","redux/operations/checkNewContactInState.js","App.js","reportWebVitals.js","redux/reducer.js","redux/store.js","index.js"],"names":["module","exports","nameRef","numberRef","PhonebookForm","styled","form","FormLabel","label","FormButton","button","addNewContactToState","createAction","e","preventDefault","target","children","payload","newName","value","trim","newNumber","clearNewContact","Form","dispatch","useDispatch","onSubmit","className","css","inputNumber","type","name","pattern","placeholder","maxLength","title","required","mask","TextH2","h2","Notification","message","makeSearch","console","log","toLowerCase","fetchContacts","a","axios","get","data","postContact","post","number","deleteContact","id","delete","then","response","Notify","success","catch","error","failure","defaults","baseURL","getContacts","createAsyncThunk","contacts","addContact","newContact","created","removeContact","doClearNumber","split","join","useFilter","filter","length","filtredArray","filterQuery","filterQueryText","filterQueryNumber","match","toString","queries","query","parseFilterQuery","includes","namesArray","concat","doFiltration","clearArray","idList","filtredList","forEach","contact","indexOf","push","clearDoubleIDs","ContactsList","ul","SearchInput","input","ContactsItem","li","NumberSpan","span","DeleteButton","getContactsSelector","state","entities","getFilterSelector","getNewContactSelector","Contacts","useSelector","filterdContacts","onInput","map","onClick","SectionStyle","section","TitleH1","h1","init","position","Section","component","sectionClassName","form_section","contacts_section","doClearName","checkNewContactInState","check","clearNumber","result","checkNumberExists","inputName","clearName","checkNameExists","checkNewContact","App","useEffect","createContact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","filterReducer","createReducer","_","newContactReducer","fulfilled","isLoading","pending","rejected","action","middleware","getDefaultMiddleware","logger","rootReducer","combineReducers","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.31979c85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputNumber\":\"Form_inputNumber__1OEr1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_section\":\"Section_form_section__3z6LY\",\"contacts_section\":\"Section_contacts_section__2t_ne\"};","import { createAction } from '@reduxjs/toolkit';\r\nlet nameRef;\r\nlet numberRef;\r\n\r\nexport const addNewContactToState = createAction('newContact/create', e => {\r\n  e.preventDefault();\r\n  nameRef = e.target.children[0].children[1];\r\n  numberRef = e.target.children[1].children[1];\r\n\r\n  return {\r\n    payload: { newName: nameRef.value.trim(), newNumber: numberRef.value },\r\n  };\r\n});\r\n\r\nexport const clearNewContact = createAction('newContact/clear', () => {\r\n  if (nameRef) nameRef.value = '';\r\n  if (numberRef) numberRef.value = '';\r\n  return {\r\n    payload: { newName: '', newNumber: '' },\r\n  };\r\n});\r\n","import styled from '@emotion/styled';\r\n\r\nexport const PhonebookForm = styled.form`\r\n  display: block;\r\n  border: solid 1px black;\r\n  padding: 10px;\r\n`;\r\n\r\nexport const FormLabel = styled.label`\r\n  display: block;\r\n  font-size: 26px;\r\n  margin-bottom: 20px;\r\n  font-weight: 600;\r\n`;\r\n\r\nexport const FormButton = styled.button`\r\n  display: block;\r\n  font-size: 22px;\r\n`;\r\n","import { FormButton, FormLabel, PhonebookForm } from './Form.styled';\nimport InputMask from 'react-input-mask';\nimport { addNewContactToState } from '../../redux/actions/newContacts_actions.js';\nimport css from './Form.module.css';\nimport { useDispatch } from 'react-redux';\n\nfunction Form() {\n  const dispatch = useDispatch();\n  return (\n    <PhonebookForm onSubmit={e => dispatch(addNewContactToState(e))}>\n      <FormLabel>\n        <span>Name</span>\n        <InputMask\n          key='nameKey'\n          className={css.inputNumber}\n          type='text'\n          name='name'\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          placeholder='Arnold Schwarzenegger'\n          maxLength='25'\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </FormLabel>\n      <FormLabel>\n        <span>Number</span>\n        <InputMask\n          key='numberKey'\n          className={css.inputNumber}\n          type='tel'\n          name='number'\n          pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n          placeholder='+38 (099) 999-99-99'\n          mask='+38 (099) 999-99-99'\n          title='Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\n          required\n        />\n      </FormLabel>\n      <FormButton type='submit'>Add contact</FormButton>\n    </PhonebookForm>\n  );\n}\nexport default Form;\n","import styled from '@emotion/styled';\r\n\r\nexport const TextH2 = styled.h2`\r\n  font-weight: 400;\r\n  color: teal;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { TextH2 } from './Notification.styled';\r\n\r\nfunction  Notification ({ message }) {\r\n  return (\r\n    <div>\r\n      <TextH2>{message}</TextH2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const makeSearch = createAction('filter/changeFilter', value => {\r\n  console.log(value.trim().toLowerCase());\r\n  return { payload: value.trim().toLowerCase() };\r\n});\r\n","import axios from 'axios';\r\nimport { Notify } from 'notiflix';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4321';\r\n\r\nexport async function fetchContacts() {\r\n  const { data } = await axios.get('/contacts');\r\n  return data;\r\n}\r\n\r\nexport async function postContact({ newName, newNumber }) {\r\n  const { data } = await axios.post('/contacts', { name: newName, number: newNumber });\r\n  return data;\r\n}\r\n\r\nexport async function deleteContact(id, name) {\r\n  axios\r\n    .delete('/contacts/' + id)\r\n    .then(response => {\r\n      console.log('response - ', response);\r\n      Notify.success(`Contact ${name} was removed successfully`);\r\n      return true;\r\n    })\r\n    .catch(error => {\r\n      // console.log('error - ', error.message);\r\n      Notify.failure(`Oh, no! ${error.message} Nothing was deleted.`);\r\n      return false;\r\n    });\r\n}\r\n","import { fetchContacts, postContact, deleteContact } from '../../services/contactsAPI';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = createAsyncThunk('contacts/fetchContacts', async () => {\r\n  const contacts = await fetchContacts();\r\n  return contacts;\r\n});\r\n\r\nexport const addContact = createAsyncThunk('contacts/createContact', async newContact => {\r\n  const created = await postContact(newContact);\r\n  return created;\r\n});\r\n\r\nexport const removeContact = createAsyncThunk('contacts/deleteContact', async ({ id, name }) => {\r\n  const isDeletable = await deleteContact(id, name);\r\n  if (isDeletable) return { id, name };\r\n  return { id: null, name: null };\r\n});\r\n","function doClearNumber(number) {\r\n  if (!number) return number;\r\n  const noSpace = number.split(' ').join('');\r\n  const noBracket = noSpace.split('(').join('').split(')').join('');\r\n  const noSign = noBracket.split('-').join('').split('+').join('');\r\n  return noSign;\r\n}\r\nexport default doClearNumber;\r\n","import doClearNumber from './doClearNumber';\r\n\r\nfunction useFilter(contacts, filter) {\r\n  if (!contacts || !contacts.length) return [];\r\n  if (!filter) return contacts;\r\n  const filtredArray = doFiltration(contacts, filter);\r\n  const clearArray = clearDoubleIDs(filtredArray);\r\n  return clearArray;\r\n}\r\n\r\nfunction doFiltration(contacts, filter) {\r\n  const { filterQueryText, filterQueryNumber } = parseFilterQuery(filter.toString());\r\n  if (filterQueryText.length > 0 || filterQueryNumber.length > 0) {\r\n    let filtredArray = [];\r\n    //поиск по номеру\r\n    if (filterQueryNumber.length > 0) {\r\n      filtredArray = contacts.filter(({ number }) => {\r\n        const clearNumberText = doClearNumber(number);\r\n        return clearNumberText.includes(filterQueryNumber);\r\n      });\r\n      //комбинированый поиск\r\n      if (filterQueryText.length > 0) {\r\n        const namesArray = contacts.filter(({ name }) => name.toLowerCase().includes(filterQueryText));\r\n        return filtredArray.length > 0 ? filtredArray.concat(namesArray) : namesArray;\r\n      }\r\n      return filtredArray;\r\n    } else {\r\n      //Поиск по имени\r\n      filtredArray = contacts.filter(({ name }) => name.toLowerCase().includes(filterQueryText));\r\n      return filtredArray;\r\n    }\r\n  }\r\n  return contacts;\r\n}\r\n\r\nfunction parseFilterQuery(filterQuery) {\r\n  let filterQueryText = '';\r\n  let filterQueryNumber = '';\r\n  if (filterQuery) {\r\n    if (filterQuery.match(/\\d+/)) {\r\n      filterQueryNumber = filterQuery.match(/\\d+/).toString();\r\n      const queries = filterQuery.split(filterQueryNumber);\r\n      const query = queries[0] || queries[1];\r\n      filterQueryText = query ? query : '';\r\n    } else {\r\n      filterQueryText = filterQuery;\r\n    }\r\n  }\r\n  return { filterQueryText, filterQueryNumber };\r\n}\r\n\r\nfunction clearDoubleIDs(contacts) {\r\n  const idList = [];\r\n  const filtredList = [];\r\n  contacts.forEach(contact => {\r\n    if (idList.indexOf(contact.id) < 0) {\r\n      idList.push(contact.id);\r\n      filtredList.push(contact);\r\n    }\r\n  });\r\n  return filtredList;\r\n}\r\n\r\nexport default useFilter;\r\n","import styled from '@emotion/styled';\r\n\r\nexport const ContactsList = styled.ul`\r\n  display: block;\r\n  padding-left: 10px;\r\n`;\r\nexport const SearchInput = styled.input`\r\n  display: block;\r\n  margin-bottom: 20px;\r\n  font-size: 22px;\r\n  outline: unset;\r\n  height: 26px;\r\n  &:focus,\r\n  &:hover {\r\n    filter: drop-shadow(0px 0px 5px lightblue);\r\n    border: 1px solid lightblue;\r\n    height: 28px;\r\n  }\r\n`;\r\n\r\nexport const ContactsItem = styled.li`\r\n  display: block;\r\n  font-family: monospace;\r\n  list-style-type: disc;\r\n  font-size: 18px;\r\n  margin-bottom: 2px;\r\n`;\r\n\r\nexport const NumberSpan = styled.span`\r\n  position: fixed;\r\n  right: 45px;\r\n  display: inline-flex;\r\n`;\r\nexport const DeleteButton = styled.button`\r\n  margin-left: 5px;\r\n  padding: 2px;\r\n  font-size: 10px;\r\n  width: 20px;\r\n  height: 20px;\r\n`;\r\n","export const getContactsSelector = state => state.contacts.entities;\r\nexport const getFilterSelector = state => state.filter;\r\n\r\nexport const getNewContactSelector = state => state.newContact;\r\n","import { Fragment } from 'react';\r\nimport Notification from '../Notification';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { makeSearch } from '../../redux/actions/filter_actions';\r\nimport { removeContact } from '../../redux/operations/contactsOperations';\r\nimport useFilter from '../../redux/operations/useFilter';\r\nimport { ContactsItem, ContactsList, DeleteButton, NumberSpan, SearchInput } from './Contacts.styled';\r\nimport { getContactsSelector, getFilterSelector } from '../../redux/selectors';\r\n\r\nfunction Contacts() {\r\n  const contacts = useSelector(getContactsSelector);\r\n  const filter = useSelector(getFilterSelector);\r\n  const filterdContacts = useFilter(contacts, filter);\r\n  const message = contacts.length ? 'No contacts found.' : 'You have no contacts yet.';\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Fragment>\r\n      <ContactsList>\r\n        <SearchInput\r\n          type='text'\r\n          name='search'\r\n          title='Введите имя или телефон'\r\n          placeholder='Search contact'\r\n          onInput={e => dispatch(makeSearch(e.target.value))}\r\n        />\r\n        {filterdContacts.length > 0 &&\r\n          filterdContacts.map(({ id, name, number }) => (\r\n            <ContactsItem key={id}>\r\n              {'☎ ' + name + ': '}\r\n              <NumberSpan>\r\n                {number}\r\n                <DeleteButton id={id} onClick={() => dispatch(removeContact({ id, name }))}>\r\n                  X\r\n                </DeleteButton>\r\n              </NumberSpan>\r\n            </ContactsItem>\r\n          ))}\r\n      </ContactsList>\r\n      {!filterdContacts.length && <Notification message={message} />}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default Contacts;\r\n","import styled from \"@emotion/styled\";\n\nexport const SectionStyle = styled.section`\n  text-align: left;\n  max-width: 500px;\n  width: 100%;\n  margin: auto;\n  border: solid 1px black;\n  background-color: white;\n  filter: drop-shadow(2px 4px 6px black);\n  padding: 25px;\n  border-radius: 10px;\n  margin: 50px auto;\n`;\n\nexport const TitleH1 = styled.h1`\n  font-size: 28px;\n  margin: 0 0 20px;\n  font-weight: 700;\n`;\n","import PropTypes from 'prop-types';\nimport Form from '../Form';\nimport Contacts from '../Contacts';\nimport { TitleH1, SectionStyle } from './Section.styled';\nimport { Notify } from 'notiflix';\nimport css from './Section.module.css';\n\nNotify.init({ position: 'center-top' });\n\nfunction Section({ title, component }) {\n  const sectionClassName = component === 'Form' ? css.form_section : css.contacts_section;\n  <TitleH1>{title}</TitleH1>;\n  return (\n    <SectionStyle className={sectionClassName}>\n      <TitleH1>{title}</TitleH1>\n      {component === 'Form' && <Form />}\n      {component === 'Contacts' && <Contacts />}\n    </SectionStyle>\n  );\n}\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  component: PropTypes.string.isRequired,\n};\n","import { Notify } from 'notiflix';\r\nimport doClearNumber from '../operations/doClearNumber';\r\n///////////////////////\r\nconst checkNewContactInState = (newContact, contacts) => {\r\n  const check = checkNewContact(newContact, contacts);\r\n  if (check.result) {\r\n    Notify.success(check.message);\r\n    return true;\r\n  } else {\r\n    if (check.message) Notify.failure(check.message);\r\n    return false;\r\n  }\r\n};\r\n////////////////////////\r\nfunction checkNewContact({ newName, newNumber }, contacts) {\r\n  if (!newName || !newNumber || !contacts) return { result: false, message: '' };\r\n  if (checkNumberExists(newNumber, contacts))\r\n    return { result: false, message: `Can't do this operation. Number ${newNumber} already exists.` };\r\n  if (checkNameExists(newName, contacts))\r\n    return { result: false, message: `Can't do this operation. Name ${newName} already exists.` };\r\n  return { result: true, message: 'Well Done! Added ' + newName };\r\n}\r\n\r\nfunction checkNameExists(inputName, contacts) {\r\n  let result = false;\r\n  const clearName = doClearName(inputName);\r\n  if (clearName === '') result = true;\r\n  contacts.forEach(({ name }) => {\r\n    if (clearName === doClearName(name)) result = true;\r\n  });\r\n  return result;\r\n}\r\n\r\nfunction checkNumberExists(inputNumber, contacts) {\r\n  const clearNumber = doClearNumber(inputNumber);\r\n  let result = false;\r\n  if (inputNumber === '') result = true;\r\n  contacts.forEach(({ number }) => {\r\n    if (clearNumber === doClearNumber(number)) result = true;\r\n  });\r\n  return result;\r\n}\r\n\r\nfunction doClearName(name) {\r\n  if (!name) return name;\r\n  return name.split(' ').join('').toLowerCase().trim();\r\n}\r\n\r\nexport default checkNewContactInState;\r\n","import { useDispatch, useSelector } from 'react-redux';\n// import PropTypes from 'prop-types';\nimport Section from './components/Section';\nimport { Notify } from 'notiflix';\n// import { addContact } from './redux/actions/contacts_actions.js';\nimport { clearNewContact } from './redux/actions/newContacts_actions';\nimport checkNewContactInState from './redux/operations/checkNewContactInState';\nimport { useEffect } from 'react';\nimport { getContacts, addContact } from './redux/operations/contactsOperations';\nimport { getContactsSelector, getNewContactSelector } from './redux/selectors';\n\nNotify.init({ position: 'center-top' });\n\nfunction App() {\n  const newContact = useSelector(getNewContactSelector);\n  const contacts = useSelector(getContactsSelector);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const createContact = newContact => dispatch(addContact(newContact));\n    const clear = () => dispatch(clearNewContact());\n    dispatch(getContacts());\n    if (newContact.name !== '' && checkNewContactInState(newContact, contacts)) {\n      createContact(newContact);\n      clear();\n    }\n  }, [contacts, dispatch, newContact]);\n\n  return (\n    <>\n      <Section title='Phonebook' component='Form' />\n      <hr />\n      <Section title='Contacts' component='Contacts' />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { makeSearch } from './actions/filter_actions';\r\nimport { addNewContactToState, clearNewContact } from './actions/newContacts_actions';\r\nimport { getContacts, addContact, removeContact } from './operations/contactsOperations';\r\n\r\nexport const filterReducer = createReducer('', { [makeSearch.type]: (_, { payload }) => payload });\r\n\r\nexport const newContactReducer = createReducer(\r\n  { newName: '', newNumber: '' },\r\n  {\r\n    [addNewContactToState]: (_, { payload }) => payload,\r\n    [clearNewContact]: (_, { payload }) => payload,\r\n  },\r\n);\r\n\r\nexport const entities = createReducer([], {\r\n  [addContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n  [removeContact.fulfilled]: (state, { payload }) => {\r\n    console.log(payload);\r\n    return state.filter(({ id }) => id !== payload.id);\r\n  },\r\n  [getContacts.fulfilled]: (state, { payload }) => {\r\n    if (state.length !== payload.length) {\r\n      return payload;\r\n    }\r\n    return state;\r\n  },\r\n});\r\n\r\nexport const isLoading = createReducer(false, {\r\n  [getContacts.pending]: () => true,\r\n  [getContacts.fulfilled]: () => false,\r\n  [getContacts.rejected]: () => false,\r\n  [addContact.pending]: () => true,\r\n  [addContact.fulfilled]: () => false,\r\n  [addContact.rejected]: () => false,\r\n  [removeContact.pending]: () => true,\r\n  [removeContact.fulfilled]: () => false,\r\n  [removeContact.rejected]: () => false,\r\n});\r\n\r\nexport const error = createReducer(null, {\r\n  [getContacts.rejected]: (_, action) => action.payload,\r\n  [getContacts.pending]: () => null,\r\n  [addContact.rejected]: (_, action) => action.payload,\r\n  [addContact.pending]: () => null,\r\n  [removeContact.rejected]: (_, action) => action.payload,\r\n  [removeContact.pending]: () => null,\r\n});\r\n","import { configureStore, combineReducers, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport { filterReducer, newContactReducer, isLoading, entities, error } from './reducer';\r\n// import { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    // serializableCheck: {\r\n    //   ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    // },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: combineReducers({ isLoading, entities, error }),\r\n  filter: filterReducer,\r\n  newContact: newContactReducer,\r\n});\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// export const persistor = persistStore(store);\r\n\r\n// const persistConfig = {\r\n//   key: 'contacts',\r\n//   storage,\r\n//   blacklist: ['filter', 'newContact'],\r\n// };\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n// reducer: persistedReducer,\r\n\r\n// const defaultExportObject = { store, persistor };\r\n// export default defaultExportObject;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}